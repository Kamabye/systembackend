# Puerto en el que se ejecuta la aplicacion
# server.port = 8081

#HEROKU
#server.port=${PORT:8080}

# URL Sitio Web
website.urldev=http://localhost:8080/system
website.urlprod=https://system-i73z.onrender.com/system
#
# http://localhost:8081/system
server.servlet.context-path=/system

spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false


# Configuración para la base de datos 1 (ej: Localhost PostgreSQL)
#spring.datasource.db1.url=jdbc:postgresql://localhost:5433/system
spring.datasource.db1.jdbc-url=jdbc:postgresql://localhost:5433/system
spring.datasource.db1.username=postgres
spring.datasource.db1.password=postgres
spring.datasource.db1.driver-class-name=org.postgresql.Driver

#HIKARICP POOL DE CONEXIONES
# Tiempo máximo (en milisegundos) que una conexión intentará establecerse. Útil para evitar bloqueos indefinidos.
spring.datasource.hikari.db1.connection-timeout=30000
# Consulta SQL utilizada para verificar la validez de una conexión. Mejora la detección de conexiones rotas.
##spring.datasource.hikari.db1.connection-test-query=SELECT 1
# Nombre de la clase del DataSource subyacente (específico de la base de datos). Necesario si usas propiedades de DataSource específicas.
#spring.datasource.hikari.db1.data-source-class-name=com.mysql.cj.jdbc.MysqlDataSource
# Indica si se deben cachear las sentencias preparadas. Mejora el rendimiento de consultas repetidas.
spring.datasource.hikari.db1.data-source-properties.cachePrepStmts=true
# Tamaño del caché de sentencias preparadas. Ajustar según la cantidad de consultas únicas.
spring.datasource.hikari.db1.data-source-properties.prepStmtCacheSize=250
# Longitud máxima de las consultas SQL que se pueden cachear.
spring.datasource.hikari.db1.data-source-properties.prepStmtCacheSqlLimit=2048
# Indica si se deben usar sentencias preparadas en el servidor de la base de datos. Puede mejorar el rendimiento.
spring.datasource.hikari.db1.data-source-properties.useServerPrepStmts=true
# Tiempo máximo (en milisegundos) que una conexión inactiva permanece en el pool antes de ser cerrada. Ayuda a liberar recursos.
spring.datasource.hikari.db1.idle-timeout=60000
# Tiempo (en milisegundos) después del cual se considera que una conexión no se ha devuelto correctamente (fuga de conexión). Útil para depurar problemas.
spring.datasource.hikari.db1.leak-detection-threshold=60000
# Número máximo de conexiones en el pool. Ajustar según la carga de la aplicación y la capacidad de la base de datos.
#spring.datasource.hikari.db1.maximum-pool-size=10
# Tiempo máximo (en milisegundos) que una conexión puede estar activa, incluso si no está inactiva. Renueva las conexiones para evitar problemas a largo plazo.
spring.datasource.hikari.db1.max-lifetime=180000
# Nombre del pool de conexiones. Útil para monitoreo y logs.
spring.datasource.hikari.db1.pool-name=PoolDB1
# Indica si las conexiones del pool son de solo lectura. Útil para mejorar el rendimiento en aplicaciones de solo lectura.
#spring.datasource.hikari.db1.read-only=false
# Indica si se deben registrar los beans de HikariCP para monitoreo.
#spring.datasource.hikari.db1.register-mbeans=false
# Número mínimo de conexiones inactivas que se mantienen en el pool. Asegura disponibilidad en momentos de carga.
spring.datasource.hikari.db1.minimum-idle=5

# Configuración adicional (menos comunes)
# Permite suspender el pool. Útil para ciertas operaciones de mantenimiento.
spring.datasource.hikari.db1.allow-pool-suspension=false
# Habilita el auto-commit. Generalmente se usa false para un mejor control de las transacciones.
spring.datasource.hikari.db1.auto-commit=true
# Establece el catálogo por defecto para las conexiones.
#spring.datasource.hikari.db1.catalog=null
# SQL para ejecutar al crear una conexión. Útil para configurar la sesión de la base de datos.
#spring.datasource.hikari.db1.connection-init-sql=null
# JNDI para un DataSource externo.
#spring.datasource.hikari.db1.datasource-jndi=null
# Indica si el nivel de aislamiento se aplica al catálogo.
#spring.datasource.hikari.db1.is-isolation-level-for-catalog=false
# URL JDBC. Se usa si no se especifica spring.datasource.url.
spring.datasource.hikari.db1.jdbc-url=jdbc:postgresql://localhost:5433/system
# Contraseña de la base de datos. Se usa si no se especifica spring.datasource.password.
spring.datasource.hikari.db1.password=postgres
# Establece el esquema por defecto para las conexiones.
#spring.datasource.hikari.db1.schema=null
# Nivel de aislamiento de las transacciones.
#spring.datasource.hikari.db1.transaction-isolation=null

# Configuración para la base de datos 2 (ej: SUPABASE Direct Conection )
#spring.datasource.db2.url=jdbc:postgresql://db.ghumtjoueftbsammwltr.supabase.co:5432/postgres
spring.datasource.db2.jdbc-url=jdbc:postgresql://db.ghumtjoueftbsammwltr.supabase.co:5432/postgres
spring.datasource.db2.username=postgres
spring.datasource.db2.password=postgres
spring.datasource.db2.driver-class-name=org.postgresql.Driver

# Configuración para la base de datos 2 (ej: SUPABASE Pool Conection)
#spring.datasource.db3.url=jdbc:postgresql://aws-0-us-west-1.pooler.supabase.com:6543/postgres
spring.datasource.db3.jdbc-url=jdbc:postgresql://aws-0-us-west-1.pooler.supabase.com:6543/postgres
spring.datasource.db3.username=postgres.ghumtjoueftbsammwltr
spring.datasource.db3.password=postgres
spring.datasource.db3.driver-class-name=org.postgresql.Driver

# Configuración para la base de datos 2 (ej: SUPABASE Session Conection)
#spring.datasource.db4.url=jdbc:postgresql://aws-0-us-west-1.pooler.supabase.com:5432/postgres
spring.datasource.db4.jdbc-url=jdbc:postgresql://aws-0-us-west-1.pooler.supabase.com:5432/postgres
spring.datasource.db4.username=postgres.ghumtjoueftbsammwltr
spring.datasource.db4.password=postgres
spring.datasource.db4.driver-class-name=org.postgresql.Driver

# Configuración para la base de datos 2 (ej: SUPABASE Session Conection)
#spring.datasource.db4.url=jdbc:postgresql://aws-0-us-west-1.pooler.supabase.com:5432/postgres
spring.datasource.db5.jdbc-url=${JDBC_DATABASE_URL}
spring.datasource.db5.username={JDBC_DATABASE_USERNAME}
spring.datasource.db5.password=${JDBC_DATABASE_PASSWORD}
spring.datasource.db5.driver-class-name=org.postgresql.Driver

#ESTA PROPIEDAD SOLO ES ESPECIFICA DE MYSQL, MARIADB
#spring.datasource.hikari.db1.dataSourceProperties.binaryTransfer=true

# Perfiles que se activan para las bases de datos
#spring.profiles.active=env
spring.profiles.active=db5

#Inicialización de la base de datos schema.sql y data.sql
#spring.sql.init.mode=always
#spring.sql.init.schema-always=false
#spring.sql.init.data-always=true

# --- JPA Configuration ---

#Retraso en la inicialización del DataSource
spring.jpa.defer-datasource-initialization=true

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#spring.jpa.properties.hibernate.hbm2ddl.auto=create-drop
#spring.datasource.hikari.db1.auto-commit=false
# Dialecto para MySQL
spring.jpa.properties.hibernate.dialect.mysql=org.hibernate.dialect.MySQL8Dialect
# Dialecto para PostgreSQL
spring.jpa.properties.hibernate.dialect.postgresql=org.hibernate.dialect.PostgreSQLDialect
# Dialecto para SQL Server
spring.jpa.properties.hibernate.dialect.sqlserver=org.hibernate.dialect.SQLServerDialect


# Establecer el tamaño máximo de página
#spring.data.web.pageable.max-page-size=100

# Establecer el tamaño de página predeterminado
#spring.data.web.pageable.default-page-size=10

# Variables de JWT Key y expiracion en 1 hora
jwt.secretkey = 462D4A614E645267556B586E3272357538782F413F4428472B4B625065536856
jwt.expiration = 12960000000000


# Tamaño máximo para archivos pequeños (por ejemplo, 10MB)
spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB


#spring.jpa.properties.hibernate.jdbc.batch_size=10
#logging.level.org.hibernate=DEBUG
#logging.level.org.hibernate.SQL=debug
#logging.level.org.springframework.jdbc.core: DEBUG

# Configuración para Jackson
# Para habilitar la salida JSON con formato (opcional)
spring.jackson.serialization.indent-output=true  
# Para evitar errores si hay beans vacíos
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false  
# Formato global para todas las fechas
#spring.jackson.date-format=yyyy-MM-dd
#spring.jackson.time-zone=UTC



#CONFIGURACION PAYPAL
#juancarloshdzvqz@gmail.com
paypal.mode = sandbox
# Configuración de PayPal SandBox
paypal.client-id.sandbox = Ae1Dm-VRxA6l30txWRlF6MvDyNBfpyg6mJbLWMd21RZ_DKRtAQcAyYqEhmAoCa6klr5ZpFP5cj2gUB42
paypal.client-secret.sandbox = EMXV7QVbDYI3rm4nnsSk2YSg8PtE71A7opwvAy-xHkOg5ZigNEQs1J97WC7ieAqE1ZKrwSjFUt4wAmNS
paypal.baseUrlSandobox.sandbox = https://api-m.sandbox.paypal.com


# Configuración de PayPal Live
paypal.client-id = AVDWeu2aV9JyK9MvJRzFycvWEY9v0RJZne9oTcaTHUbImA04mUmiagyOUe5PC2-WsSBeFKHth-aZ026F
#paypal.client-id = ${PAYPAL_CLIENTID}
paypal.client-secret = ECanw0RNVH7JkMbGyL7BgGMJxoWFp7f-YqyOpnS9aDh834LOr4d-M_hARX43UoYZHMolDJkw8J3a7BJ3
#paypal.client-secret = ${PAYPAL_CLIENTSECRET}
paypal.baseUrlLive = https://api-m.paypal.com
paypal.http.connection-timeout=5000
paypal.http.retry=1


# Configuración de Mercado Pago Prueva
mercadopago.clientId=211820683
mercadopago.clientSecret=TEST-a4032e20-6afd-425d-a692-945dd56a8d06
mercadopago.clientToken=TEST-1483429516892676-011316-af5fb6b974f40ca177a66e24bb119a50-211820683